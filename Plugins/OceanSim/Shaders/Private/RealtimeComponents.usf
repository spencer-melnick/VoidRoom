#include "/OceanShaders/Private/Common.ush"

Texture2D<float4> InitialComponents;
RWStructuredBuffer<float2> HeightComponentsBuffer;
RWStructuredBuffer<float2> SlopeXBuffer;
RWStructuredBuffer<float2> SlopeYBuffer;

float Time;

float CalculateDispersion(float2 K)
{
    float Magnitude = length(K);
    if (Magnitude < 0.0001)
    {
        Magnitude = 0.0001;
    }
	
    return sqrt(Magnitude * Gravity);
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, 1)]
void main( uint3 id : SV_DispatchThreadID )
{
	float4 InitialSample = InitialComponents[id.xy];
	float2 K = CalculateK(id.xy);
	float w = CalculateDispersion(K);
	float2 Complex1 = ImaginaryExponent(w * Time);
	float2 Complex2 = ImaginaryExponent(-w * Time);
	
    float2 Component = ComplexMultiply(Complex1, InitialSample.rg);
    float2 Component2 = ComplexMultiply(Complex2, Conjugate(InitialSample.ba));
    float2 Result = Component + Component2;

    uint Index = CoordinateToIndex(id.xy);
	
    HeightComponentsBuffer[Index] = Result;
    
    SlopeXBuffer[Index] = ComplexMultiply(Result, float2(0, K.x));
    SlopeYBuffer[Index] = ComplexMultiply(Result, float2(0, K.y));

}
