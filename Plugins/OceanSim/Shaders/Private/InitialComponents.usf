#include "/OceanShaders/Private/Common.ush"

Texture2D<float4> NoiseTexture;
RWTexture2D<float4> ComponentTexture;

float Phillips(float2 K)
{
    if (abs(K.x * K.y) < 0.0000000001)
    {
        return float2(0, 0);
    }
	
	float L = WindSpeed * WindSpeed / Gravity;
	float l = L / 1000;

	float2 k = normalize(K);
	float k2 = K.x * K.y;

	float kw = dot(k, WindDirection);

    return Amplitude * exp(-1 / (k2 * L * L)) * pow(kw, 6) * exp(-k2 * l * l) / (k2 * k2);
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void main( uint3 id : SV_DispatchThreadID )
{
	float4 InputNoise = NoiseTexture[id.xy];

	float2 K = CalculateK(id.xy);
    float2 RedGreen = float2(id.xy) / float2(BufferSize);
    float Magnitude = sqrt(Phillips(K)) / sqrt(2);
    ComponentTexture[id.xy] = Magnitude * float4(InputNoise.xy, 0, 1);
}